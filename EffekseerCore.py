# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_EffekseerCore')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_EffekseerCore')
    _EffekseerCore = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EffekseerCore', [dirname(__file__)])
        except ImportError:
            import _EffekseerCore
            return _EffekseerCore
        try:
            _mod = imp.load_module('_EffekseerCore', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _EffekseerCore = swig_import_helper()
    del swig_import_helper
else:
    import _EffekseerCore
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

EffekseerCoreDeviceType_Unknown = _EffekseerCore.EffekseerCoreDeviceType_Unknown
EffekseerCoreDeviceType_OpenGL = _EffekseerCore.EffekseerCoreDeviceType_OpenGL
class EffekseerBackendCore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffekseerBackendCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EffekseerBackendCore, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EffekseerCore.new_EffekseerBackendCore()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _EffekseerCore.delete_EffekseerBackendCore
    __del__ = lambda self: None
    if _newclass:
        GetDevice = staticmethod(_EffekseerCore.EffekseerBackendCore_GetDevice)
    else:
        GetDevice = _EffekseerCore.EffekseerBackendCore_GetDevice
    if _newclass:
        InitializeAsOpenGL = staticmethod(_EffekseerCore.EffekseerBackendCore_InitializeAsOpenGL)
    else:
        InitializeAsOpenGL = _EffekseerCore.EffekseerBackendCore_InitializeAsOpenGL
    if _newclass:
        Terminate = staticmethod(_EffekseerCore.EffekseerBackendCore_Terminate)
    else:
        Terminate = _EffekseerCore.EffekseerBackendCore_Terminate
EffekseerBackendCore_swigregister = _EffekseerCore.EffekseerBackendCore_swigregister
EffekseerBackendCore_swigregister(EffekseerBackendCore)

def EffekseerBackendCore_GetDevice():
    return _EffekseerCore.EffekseerBackendCore_GetDevice()
EffekseerBackendCore_GetDevice = _EffekseerCore.EffekseerBackendCore_GetDevice

def EffekseerBackendCore_InitializeAsOpenGL():
    return _EffekseerCore.EffekseerBackendCore_InitializeAsOpenGL()
EffekseerBackendCore_InitializeAsOpenGL = _EffekseerCore.EffekseerBackendCore_InitializeAsOpenGL

def EffekseerBackendCore_Terminate():
    return _EffekseerCore.EffekseerBackendCore_Terminate()
EffekseerBackendCore_Terminate = _EffekseerCore.EffekseerBackendCore_Terminate

EffekseerTextureType_Color = _EffekseerCore.EffekseerTextureType_Color
EffekseerTextureType_Normal = _EffekseerCore.EffekseerTextureType_Normal
EffekseerTextureType_Distortion = _EffekseerCore.EffekseerTextureType_Distortion
class EffekseerEffectCore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffekseerEffectCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EffekseerEffectCore, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EffekseerCore.new_EffekseerEffectCore()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _EffekseerCore.delete_EffekseerEffectCore
    __del__ = lambda self: None

    def Load(self, *args):
        return _EffekseerCore.EffekseerEffectCore_Load(self, *args)

    def GetTexturePath(self, index, type):
        return _EffekseerCore.EffekseerEffectCore_GetTexturePath(self, index, type)

    def GetTextureCount(self, type):
        return _EffekseerCore.EffekseerEffectCore_GetTextureCount(self, type)

    def LoadTexture(self, *args):
        return _EffekseerCore.EffekseerEffectCore_LoadTexture(self, *args)

    def HasTextureLoaded(self, index, type):
        return _EffekseerCore.EffekseerEffectCore_HasTextureLoaded(self, index, type)

    def GetModelPath(self, index):
        return _EffekseerCore.EffekseerEffectCore_GetModelPath(self, index)

    def GetModelCount(self):
        return _EffekseerCore.EffekseerEffectCore_GetModelCount(self)

    def LoadModel(self, *args):
        return _EffekseerCore.EffekseerEffectCore_LoadModel(self, *args)

    def HasModelLoaded(self, index):
        return _EffekseerCore.EffekseerEffectCore_HasModelLoaded(self, index)

    def GetMaterialPath(self, index):
        return _EffekseerCore.EffekseerEffectCore_GetMaterialPath(self, index)

    def GetMaterialCount(self):
        return _EffekseerCore.EffekseerEffectCore_GetMaterialCount(self)

    def LoadMaterial(self, *args):
        return _EffekseerCore.EffekseerEffectCore_LoadMaterial(self, *args)

    def HasMaterialLoaded(self, index):
        return _EffekseerCore.EffekseerEffectCore_HasMaterialLoaded(self, index)

    def GetTermMax(self):
        return _EffekseerCore.EffekseerEffectCore_GetTermMax(self)

    def GetTermMin(self):
        return _EffekseerCore.EffekseerEffectCore_GetTermMin(self)
EffekseerEffectCore_swigregister = _EffekseerCore.EffekseerEffectCore_swigregister
EffekseerEffectCore_swigregister(EffekseerEffectCore)

class EffekseerManagerCore(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EffekseerManagerCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EffekseerManagerCore, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _EffekseerCore.new_EffekseerManagerCore()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _EffekseerCore.delete_EffekseerManagerCore
    __del__ = lambda self: None

    def Initialize(self, spriteMaxCount, srgbMode=False, gl2=False):
        return _EffekseerCore.EffekseerManagerCore_Initialize(self, spriteMaxCount, srgbMode, gl2)

    def Update(self, deltaFrames):
        return _EffekseerCore.EffekseerManagerCore_Update(self, deltaFrames)

    def BeginUpdate(self):
        return _EffekseerCore.EffekseerManagerCore_BeginUpdate(self)

    def EndUpdate(self):
        return _EffekseerCore.EffekseerManagerCore_EndUpdate(self)

    def UpdateHandleToMoveToFrame(self, handle, v):
        return _EffekseerCore.EffekseerManagerCore_UpdateHandleToMoveToFrame(self, handle, v)

    def Play(self, effect):
        return _EffekseerCore.EffekseerManagerCore_Play(self, effect)

    def StopAllEffects(self):
        return _EffekseerCore.EffekseerManagerCore_StopAllEffects(self)

    def Stop(self, handle):
        return _EffekseerCore.EffekseerManagerCore_Stop(self, handle)

    def SetPaused(self, handle, v):
        return _EffekseerCore.EffekseerManagerCore_SetPaused(self, handle, v)

    def SetShown(self, handle, v):
        return _EffekseerCore.EffekseerManagerCore_SetShown(self, handle, v)

    def SetEffectPosition(self, handle, x, y, z):
        return _EffekseerCore.EffekseerManagerCore_SetEffectPosition(self, handle, x, y, z)

    def SetEffectTransformMatrix(self, handle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11):
        return _EffekseerCore.EffekseerManagerCore_SetEffectTransformMatrix(self, handle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)

    def SetEffectTransformBaseMatrix(self, handle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11):
        return _EffekseerCore.EffekseerManagerCore_SetEffectTransformBaseMatrix(self, handle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11)

    def DrawBack(self):
        return _EffekseerCore.EffekseerManagerCore_DrawBack(self)

    def DrawFront(self):
        return _EffekseerCore.EffekseerManagerCore_DrawFront(self)

    def SetProjectionMatrix(self, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15):
        return _EffekseerCore.EffekseerManagerCore_SetProjectionMatrix(self, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)

    def SetCameraMatrix(self, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15):
        return _EffekseerCore.EffekseerManagerCore_SetCameraMatrix(self, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15)

    def Exists(self, handle):
        return _EffekseerCore.EffekseerManagerCore_Exists(self, handle)

    def SetViewProjectionMatrixWithSimpleWindow(self, windowWidth, windowHeight):
        return _EffekseerCore.EffekseerManagerCore_SetViewProjectionMatrixWithSimpleWindow(self, windowWidth, windowHeight)

    def SetDynamicInput(self, handle, index, value):
        return _EffekseerCore.EffekseerManagerCore_SetDynamicInput(self, handle, index, value)

    def GetDynamicInput(self, handle, index):
        return _EffekseerCore.EffekseerManagerCore_GetDynamicInput(self, handle, index)

    def LaunchWorkerThreads(self, n):
        return _EffekseerCore.EffekseerManagerCore_LaunchWorkerThreads(self, n)
EffekseerManagerCore_swigregister = _EffekseerCore.EffekseerManagerCore_swigregister
EffekseerManagerCore_swigregister(EffekseerManagerCore)

# This file is compatible with both classic and new-style classes.


